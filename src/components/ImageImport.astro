---
import type { ImageMetadata } from "astro";
import { getImage } from "astro:assets";

/**
 * レスポンシブに対応した画像表示コンポーネント。
 */
interface Props {
  /**
   * PC用の画像ソースパス。`/src/img/` から始まるパス、または外部URLを指定します。
   */
  src: string;
  /**
   * 画像の代替テキスト。
   */
  alt?: string;
  /**
   * 画像の幅と高さの配列。[PC幅, PC高さ, SP幅, SP高さ] の順で指定します。SP用のサイズがない場合は PC と同じ値を指定するか、0 を指定します。
   */
  sizes?: number[];
  /**
   * 画像に適用するCSSクラス。
   */
  class?: string;
  /**
   * 画像の遅延読み込みを行うかどうか。デフォルトは true。
   */
  lazy?: boolean;
  /**
   * SP用の画像ソース (`src` に `_sp` を付加したパス) を使用するかどうか。デフォルトは false。
   */
  sp?: boolean;
}

const {
  src,
  alt,
  sizes,
  class: className,
  lazy = true,
  sp = false,
} = Astro.props;

const [imgName, imgType] = src.split(/(?=\.[^.]+$)/);
const spSrc = imgName + "_sp" + imgType;

/**
 * `/src/img/` 以下の画像を glob で検索し、その src を解決する関数。
 * キャッシュされた画像情報を使用します。
 * @param {string} src - 画像のパス。
 * @returns {Promise<string | undefined>} - 解決された画像の src、または undefined (見つからない場合)。
 */
const resolveImage = async (src: string): Promise<string | undefined> => {
  if (src.startsWith("/src/img/") && allImages[src]) {
    const module = await allImages[src]();
    // getImage 関数を使って最適化された画像オブジェクトを取得
    const optimizedImage = await getImage({
      src: module.default,
      format: module.default.format,
    });
    return optimizedImage.src; // 最適化された画像の public URL を返します
  }
  return src;
};

/**
 * `/src/img/` 以下の画像を glob で一括検索し、キャッシュします。
 */
const allImages = import.meta.glob<{ default: ImageMetadata }>(
  "/src/img/*.{jpeg,jpg,png,gif,svg}"
);

const pcImage = await resolveImage(src);
let spImage = null;
if (sp) {
  spImage = await resolveImage(spSrc);
}
---

{
  sp ? (
    <picture>
      {pcImage && (
        <source
          media="(min-width: 768px)"
          srcset={pcImage}
          width={sizes ? sizes[0] : null}
          height={sizes ? sizes[1] : null}
        />
      )}
      {spImage && (
        <img
          src={spImage}
          alt={alt ? alt : ""}
          width={sizes ? sizes[2] : null}
          height={sizes ? sizes[3] : null}
          class={className}
          loading={lazy ? "lazy" : "eager"}
          decoding="async"
        />
      )}
    </picture>
  ) : (
    <img
      src={pcImage}
      alt={alt ? alt : ""}
      width={sizes ? sizes[0] : null}
      height={sizes ? sizes[1] : null}
      class={className}
      loading={lazy ? "lazy" : "eager"}
      decoding="async"
    />
  )
}
