---
import type { ImageMetadata } from 'astro';

interface Props {
	src: string;
	alt?: string;
	sizes?: number[];
	width?: number;
	height?: number;
	spWidth?: number;
	spHeight?: number;
	class?: string;
	lazy?: boolean;
	sp?: boolean;
}

const {
	src,
	alt,
	sizes,
	class: className,
	lazy = true,
	sp = false,
} = Astro.props;

const [imgName, imgType] = src.split(/(?=\.[^.]+$)/);
const spSrc = imgName + '_sp' + imgType;

const resolveImage = async (src: string): Promise<string | undefined> => {
	if (src.startsWith('/src/img/')) {
		const images = import.meta.glob<{ default: ImageMetadata }>(
			'/src/img/*.{jpeg,jpg,png,gif,svg}'
		);
		if (images[src]) {
			const module = await images[src]();
			return module.default.src; // default プロパティ内の src を取得
		}
		return src; // glob に存在しない場合は元のパスを返す (外部 URL の可能性)
	}
	return src; // ローカルパスでない場合はそのまま返す (外部 URL の可能性)
};

const pcImage = await resolveImage(src);
let spImage = null;
if (sp) {
	spImage = await resolveImage(spSrc);
}
---

{
	sp ? (
		<picture>
			{pcImage && (
				<source
					media='(min-width: 768px)'
					srcset={src}
					width={sizes ? sizes[0] : null}
					height={sizes ? sizes[1] : null}
				/>
			)}
			{spImage && (
				<img
					src={spSrc}
					alt={alt ? alt : ''}
					width={sizes ? sizes[2] : null}
					height={sizes ? sizes[3] : null}
					class={className}
					loading={lazy ? 'lazy' : 'eager'}
					decoding='async'
				/>
			)}
		</picture>
	) : (
		<img
			src={src}
			alt={alt ? alt : ''}
			width={sizes ? sizes[0] : null}
			height={sizes ? sizes[1] : null}
			class={className}
			loading={lazy ? 'lazy' : 'eager'}
			decoding='async'
		/>
	)
}
