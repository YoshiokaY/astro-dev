---
interface Props {
	menu: 
		{
			link: string;
			txt: string;
			blank?: boolean;
			anchor?: boolean;
			child?: {
				link: string;
				txt: string;
				blank?: boolean;
				anchor?: boolean;
			}[];
		}[];
	domain: string;
}

const { menu, domain } = Astro.props;
---

<nav class='headerNavi'>
	<h2 class='txtHidden'>グローバルナビゲーション</h2>
	<button class='ac_menu'><span>メニューを開く</span></button>
	<div class='naviWrapper'>
		<div class='overflow-y-auto h-full md:overflow-y-visible'>
			<ul
				class='flex flex-col items-center md:flex-row md:gap-40 md:justify-end gap-28'
				id='navi'
			>
				{
					menu.map((item) => (
						<li class={item.child ? 'has-child' : null}>
							<a
								href={item.anchor ? domain + item.link : item.link}
								target={item.blank ? '_blank' : '_self'}
							>
								{item.txt}
							</a>
							{item.child && (
                <button class="spAccordion"><span class="txtHidden">子メニューを表示します</span></button>
								<ul class="subMenu">
									{item.child.map((child) => (
										<li>
											<a
												href={child.anchor ? domain + child.link : child.link}
												target={child.blank ? '_blank' : '_self'}
											>
												{child.txt}
											</a>
										</li>
									))}
								</ul>
							)}
						</li>
					))
				}
			</ul>
		</div>
	</div>
</nav>

<style lang='scss'>
	.headerNavi {
    position: relative;
		&::before {
			position: fixed;
			inset: 0 0 auto auto;
			z-index: 997;
			height: 6rem;
			aspect-ratio: 1;
			margin: auto;
			content: '';
			border-radius: 50%;
			opacity: 0;
      background-color: var.$color-reversal;
			transition:
				transform 0.6s cubic-bezier(0.6, -0.01, 0.1, 1),
				opacity 0.2s ease-out 0.3s;
			transform: translateZ(0) scale(0);
			@include mix.mq() {
				content: none;
			}
		}
    &.-open {
      &::before {
        opacity: 1;
        transition:
          transform 0.8s cubic-bezier(0.4, 0.1, 0.3, 1),
          oapcity 0.3s cubic-bezier(0.4, 0.1, 0.3, 1) 0.5s;
        transform: translateZ(0) scale(80);
      }

      .ac_menu {
        span {
          background-color: transparent;

          &::before,
          &::after {
            top: 0;
            bottom: 0;
            transition: rotate var.$easing;
            rotate: 45deg;
          }

          &::after {
            rotate: -45deg;
          }
        }
      }

      .naviWrapper {
        @include mix.mq(sp) {
          visibility: visible;
          opacity: 1;

          #navi {
            visibility: visible;
            opacity: 1;
          }
        }
      }
    }
	}
	// ハンバーガーボタン
	.ac_menu {
		position: absolute;
		inset: 0 0 0 auto;
		z-index: 999;
		aspect-ratio: 1/1;
		margin: auto;
    height: 6rem;
		@include mix.mq() {
			display: none;
		}

		> span {
			position: absolute;
			inset: 0;
			margin: auto;
			color: transparent;
			text-indent: -999rem;
      background-color: var.$color-prime;
      height: 0.5rem;
      border-radius: 999rem;
      width: 100%;
			transition: background-color var.$easing;

			&::before,
			&::after {
				position: absolute;
				inset: 0;
				display: block;
				width: 100%;
				margin: auto;
				content: '';
				transition: rotate var.$easing;
        background-color: var.$color-prime;
      height: 0.5rem;
      border-radius: 999rem;
			}

      &::before {
        top: -0.7rem;
        bottom: auto;
      }

			&::after {
				top: auto;
				bottom: -0.7rem;
			}
		}
	}
	// SP時メニュー背景
	.naviWrapper {
		position: absolute;
		inset: 0;
		z-index: 998;
		height: 100dvh;
		padding: calc(17.6rem / 2) calc(20 / 375 * 100%);
		visibility: hidden;
		opacity: 0;
		transition: opacity 0.3s ease-out 0.4s;
		@include mix.mq() {
			position: relative;
			width: 100%;
			height: 100%;
			padding: 0;
			margin: auto;
			overflow-y: visible;
			visibility: visible;
			background-color: transparent;
			opacity: 1;
		}
	}
	// メニュー
	#navi {
		position: relative;
		width: 100%;
		margin: auto;
		visibility: hidden;
		opacity: 0;
		@include mix.mq() {
			visibility: visible;
			opacity: 1;
		}

		> li {
      position: relative;
			a {
				position: relative;
				display: block;
				// 下線/矢印
				&::before {
					@include mix.mq() {
						position: absolute;
						inset: auto 0 0;
						width: 0;
						height: 0.2rem;
						margin: auto;
						content: '';
						background-color: var.$color-prime;
						transition: width 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
						rotate: none;
					}
				}
				@include mix.hover {
					@include mix.mq() {
						color: var.$color-prime;

						&::before {
							width: 100%;
						}
					}
				}
			}

			// 現在ページ
			&.-current {
				@include mix.mq() {
					.naviLink {
						pointer-events: none;

						&::before {
							width: 100%;
						}
					}
				}
			}
			/// -----------------サブメニュー//
			&.has-child {
				@include mix.mq(sp) {
					overflow: hidden;
				}

				.spAccordion {
					position: absolute;
					inset: 0 0 0 auto;
					aspect-ratio: 1/1;
					margin: auto;
          @include mix.mq() {
            display: none;
          }

					> span {
						display: block;
						width: 100%;
						height: 100%;
						color: transparent;
						text-indent: -999rem;

						&::before,
						&::after {
							position: absolute;
							inset: 0;
							display: block;
							width: 100%;
							margin: auto;
							content: '';
							transition: rotate var.$easing;
						}

						&::before {
							rotate: 90deg;
						}
					}

					&.-open {
						> span {
							&::before {
								rotate: none;
							}
						}
					}
				}

				// サブメニュー本体
				> ul.subMenu {
					@include mix.mq() {
						position: absolute;
						inset: 0 0 auto -25%;
						width: 150%;
						overflow: visible;
						visibility: hidden;
						opacity: 0;
						transition:
							top 0.8s cubic-bezier(0.165, 0.84, 0.44, 1),
							opacity var.$easing;
            background-color: var.$color-highlight;
            color: var.$color-prime;
					}
					@include mix.mq(sp) {
						position: relative;
						height: 0;
						max-height: none;
						visibility: hidden;
						transition:
							height var.$easing,
							opacity var.$easing;

						&.-open {
							height: var(--subHeaderHeight);
							visibility: visible;
							opacity: 1;
						}
					}

					> li {
						> a {
							@include mix.mq() {
								&::before {
									right: auto;
								}
							}
						}
					}

					&.-open {
						height: var(--subHeightOpen, auto);
					}
				}
				@include mix.mq() {
					@include mix.hover {
						ul.subMenu {
							top: 100%;
							visibility: visible;
							opacity: 1;
						}
					}
					// キーボード操作時に子メニューを閉じないようにする
					&:focus-within {
						> ul.subMenu {
							top: 100%;
							visibility: visible;
							opacity: 1;
						}
					}
				}
			}
		}
	}
</style>
