---
/**
 * グロナビコンポーネント
 */
interface MenuItem {
  link: string;
  txt: string;
  blank?: boolean;
  anchor?: boolean;
  child?: MenuItem[];
}

interface Props {
  /**
   * グローバルナビゲーションのメニュー項目を定義する配列。
   */
  menu: MenuItem[];
  /**
   * サイトのドメイン名。アンカーリンク (`anchor: true`) の場合にURLを生成するために使用されます。
   */
  domain: string;
}

const { menu, domain } = Astro.props;
---

<nav class="headerNavi">
  <h2 class="txtHidden">グローバルナビゲーション</h2>
  <button class="ac_menu"><span>メニューを開く</span></button>
  <div class="naviWrapper">
    <div class="contentInner">
      <ul id="navi">
        {
          menu.map((item) => (
            <li class={(item.child ? "has-child" : null)}>
              <a
                href={item.anchor ? domain + item.link : item.link}
                target={item.blank ? "_blank" : "_self"}
              >
                {item.txt}
              </a>
              {item.child && (
                <button class="spAccordion"><span class="txtHidden">子メニューを表示します</span></button>
                <ul class="subMenu">
                  {item.child.map((child) => (
                    <li>
                      <a
                        href={child.anchor ? domain + child.link : child.link}
                        target={child.blank ? "_blank" : "_self"}
                      >
                        {child.txt}
                      </a>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))
        }
      </ul>
    </div>
    <button class="closeBtn txtHidden">メニューを閉じる</button>
  </div>
</nav>

<style lang="scss">
	.headerNavi {
    position: relative;
		&::before {
			position: fixed;
			inset: 0 0 auto auto;
			z-index: 997;
			height: 6rem;
			aspect-ratio: 1;
			margin: auto;
			content: '';
			border-radius: 50%;
			opacity: 0;
      background-color: $color-reversal;
			transition:
				transform 0.6s cubic-bezier(0.6, -0.01, 0.1, 1),
				opacity 0.2s ease-out 0.3s;
			transform: translateZ(0) scale(0);
			@include mq() {
				content: none;
			}
		}
    &.-open {
      &::before {
        opacity: 1;
        transition:
          transform 0.8s cubic-bezier(0.4, 0.1, 0.3, 1),
          oapcity 0.3s cubic-bezier(0.4, 0.1, 0.3, 1) 0.5s;
        transform: translateZ(0) scale(80);
      }

      .ac_menu {
        span {
          background-color: transparent;

          &::before,
          &::after {
            top: 0;
            bottom: 0;
            transition: rotate $easing;
            rotate: 45deg;
          }

          &::after {
            rotate: -45deg;
          }
        }
      }

      .naviWrapper {
        @include mq(sp) {
          visibility: visible;
          opacity: 1;

          #navi {
            visibility: visible;
            opacity: 1;
          }
        }
      }
    }
	}
	// ハンバーガーボタン
	.ac_menu {
		position: absolute;
		inset: 0 0 0 auto;
		z-index: 999;
		aspect-ratio: 1/1;
    height: 6rem;
    margin: auto;

		@include mq() {
			display: none;
		}

		> span {
			position: absolute;
			inset: 0;
			margin: auto;
			color: transparent;
			text-indent: -999rem;
      background-color: $color-prime;
      height: 0.5rem;
      border-radius: 999rem;
      width: 90%;
			transition: background-color $easing;

			&::before,
			&::after {
				position: absolute;
				inset: -1.3rem 0 auto;
				display: block;
				width: 100%;
				margin: auto;
				content: '';
				transition: rotate $easing;
        background-color: $color-prime;
        height: 0.5rem;
        border-radius: 999rem;
			}

			&::after {
				top: auto;
				bottom: -1.3rem;
			}
		}
	}
	// SP時メニュー背景
	.naviWrapper {
		position: fixed;
		inset: 0;
		z-index: 998;
    width: 100%;
		height: 100dvh;
		visibility: hidden;
    padding-top: var(--headerHeight);
		opacity: 0;
		transition: opacity 0.3s ease-out 0.4s;
		@include mq() {
			position: relative;
			width: 100%;
			height: 100%;
			padding: 0;
			margin: auto;
			overflow-y: visible;
			visibility: visible;
			background-color: transparent;
			opacity: 1;
		}
	}
	// メニュー
	#navi {
		position: relative;
		width: 100%;
		margin: auto;
		visibility: hidden;
		opacity: 0;
    flex-direction: column;
    gap: 2.8rem;
    align-items: center;
		@include mq() {
			visibility: visible;
			opacity: 1;
      display: flex;
      gap: 4rem;
      justify-content: flex-end;
      flex-direction: row;
		}

		> li {
      position: relative;
      @include mq(sp) {
        border-bottom: 0.1rem solid $color-prime;
        width: 100%;
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
      }
			a {
				position: relative;
        padding-block: 1em;
        display: block;
        width: 100%;
        @include mq() {
          padding-block: 0 0.5em;
        }
				// 下線/矢印
				&::before {
					@include mq() {
						position: absolute;
						inset: auto 0 0;
						width: 0;
						height: 0.2rem;
						margin: auto;
						content: '';
						background-color: $color-prime;
						transition: width 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
						rotate: none;
					}
				}
				@include hover {
					@include mq() {
						color: $color-prime;

						&::before {
							width: 100%;
						}
					}
				}
			}
			/// -----------------サブメニュー//
			&.has-child {
				@include mq(sp) {
					overflow: hidden;
				}

				.spAccordion {
					position: absolute;
					inset: 1em 0 auto auto;
					aspect-ratio: 1;
					margin: auto;
          height: 2.4rem;
          @include mq() {
            display: none;
          }

          &::before,
					&::after {
						position: absolute;
						inset: 0;
						display: block;
						width: 2rem;
            height: 0.2rem;
						margin: auto;
            background-color: $color-prime;
						content: '';
						transition: rotate $easing;
					}

						&::before {
							rotate: 90deg;
						}
				}

				// サブメニュー本体
				> ul.subMenu {
					@include mq() {
						position: absolute;
            padding: 1.6rem;
						inset: 0 0 auto -25%;
						width: 150%;
						overflow: visible;
						visibility: hidden;
						opacity: 0;
						transition:
							top 0.8s cubic-bezier(0.165, 0.84, 0.44, 1),
							opacity $easing;
            background-color: $color-highlight;
            color: $color-prime;
					}
					@include mq(sp) {
            padding-left: 1em;
            width: 100%;
						position: relative;
						height: 0;
						max-height: none;
						visibility: hidden;
            transition: height $easing;
					}

					> li {
						> a {
							@include mq() {
                width: 100%;
                display: block;
								&::before {
									right: auto;
								}
							}
						}
					}
				}
        &.-open {
          @include mq(sp) {
            .spAccordion {
              &::before {
							rotate: none;
						}
            }
            > ul.subMenu {
              height: auto;
							visibility: visible;
						}
					}
        }
				@include mq() {
					@include hover {
						ul.subMenu {
							top: 100%;
							visibility: visible;
							opacity: 1;
						}
					}
					// キーボード操作時に子メニューを閉じないようにする
					&:focus-within {
						> ul.subMenu {
							top: 100%;
							visibility: visible;
							opacity: 1;
						}
					}
				}
			}
		}
	}
</style>

<script>
  import { Hamburger } from '../ts/class/Hamburger';
  window.addEventListener('DOMContentLoaded', () => {
	new Hamburger(); // ハンバーガー
});
</script>
